plugins {
    id 'idea'
    id 'checkstyle'
    id 'pmd'
    id 'application'
}

ext.artifactName = 'radar-schemas-validation'
ext.description = 'RADAR Schemas Validator. JUnit tests to check schema acceptance.'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'
mainClassName = 'org.radarcns.schema.CommandLineApp'

sourceSets {
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
}

ext.junitVersion = '4.12'
ext.slf4jVersion = '1.7.25'

dependencies {
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.10'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.8.10'
    implementation project(':radar-schemas-commons')
    implementation group: 'org.radarcns', name: 'radar-commons', version: '0.5'

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
}

//---------------------------------------------------------------------------//
// Exchange configuration with Java code                                     //
//---------------------------------------------------------------------------//
ext.exchnageConfigPath = 'src/test/resources/gradle.properties'
task exchangeConfig() {
    doLast {
        if (!file(exchnageConfigPath).exists() || file(exchnageConfigPath).delete()) {
            file(exchnageConfigPath).createNewFile()
            file(exchnageConfigPath).write("project.group=${project.group}")
        } else {
            throw new GradleException("Error while creating file at ${exchnageConfigPath}")
        }
    }
}
compileJava.dependsOn exchangeConfig

task cleanExchangeConfig() {
    doLast {
        if (file(exchnageConfigPath).exists()) {
            if (!file(exchnageConfigPath).delete()) {
                throw new GradleException("File at ${exchnageConfigPath} cannot be delated.")
            }
        }
    }
}
clean.dependsOn cleanExchangeConfig

//---------------------------------------------------------------------------//
// Test definition                                                           //
//---------------------------------------------------------------------------//
test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
        showExceptions = true
        showCauses = true
        showStackTraces = true
        showStandardStreams = true
    }
}

//---------------------------------------------------------------------------//
// Style checking                                                            //
//---------------------------------------------------------------------------//
checkstyle {
    // codacy version
    toolVersion '6.16'
    ignoreFailures false

    configFile = file("$projectDir/config/checkstyle/checkstyle.xml")
}

pmd {
    // pmd version
    toolVersion = '5.5.2'
    ignoreFailures = false

    consoleOutput = true

    ruleSets = []

    ruleSetFiles = files("$projectDir/config/pmd/ruleset.xml")
}
