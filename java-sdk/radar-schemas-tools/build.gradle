plugins {
    id 'idea'
    id 'checkstyle'
    id 'pmd'
    id 'application'
    id 'com.jfrog.artifactory'
}

targetCompatibility = '11'
sourceCompatibility = '11'
mainClassName = 'org.radarcns.schema.CommandLineApp'

configurations {
    implementation {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
    runtimeOnly {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
}

sourceSets {
    test {
        java.srcDir 'src/test/java'
        resources.srcDir 'src/test/resources'
    }
}

ext {
    artifactName = 'radar-schemas-tools'
    description = 'RADAR Schemas specification and validation tools.'

    argparseVersion = '0.8.1'
    jacksonVersion = '2.9.9'
    jerseyVersion = '2.28'
    jettyVersion = '9.4.17.v20190418'
    junitVersion = '4.12'
    confluentVersion = '5.2.1'
    kafkaVersion = '2.2.0-cp2'
    okHttpVersion = '3.14.1'
    radarCommonsVersion = '0.12.1'
    slf4jVersion = '1.7.26'
}

repositories {
    jcenter()
    maven { url 'http://packages.confluent.io/maven/' }
    maven { url  "https://dl.bintray.com/radar-base/org.radarbase" }
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local' }
}

dependencies {
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    api group: 'javax.validation', name: 'validation-api', version: '2.0.0.Final'
    api group: 'org.apache.kafka', name: 'kafka_2.12', version: kafkaVersion

    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: jacksonVersion
    implementation project(':radar-schemas-commons')
    implementation group: 'org.radarbase', name: 'radar-commons', version: radarCommonsVersion
    implementation group: 'org.radarbase', name: 'radar-commons-server', version: radarCommonsVersion
    implementation group: 'net.sourceforge.argparse4j', name: 'argparse4j', version: argparseVersion
    implementation group: 'com.squareup.okhttp3', name: 'okhttp', version: okHttpVersion
    implementation group: 'org.eclipse.jetty', name: 'jetty-server', version: jettyVersion
    implementation group: 'org.eclipse.jetty', name: 'jetty-servlet', version: jettyVersion
    implementation group: 'org.glassfish.jersey.core', name: 'jersey-server', version: jerseyVersion
    implementation group: 'io.confluent', name: 'kafka-connect-avro-converter', version: confluentVersion
    implementation group: 'io.confluent', name: 'kafka-schema-registry', version: confluentVersion
    implementation group: 'org.apache.kafka', name: 'connect-json', version: kafkaVersion

    // source catalogue service annotations
    api group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: jerseyVersion

    runtimeOnly group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyVersion
    runtimeOnly group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
    runtimeOnly group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyVersion

    testImplementation group: 'junit', name: 'junit', version: junitVersion
}

task createStartScripts(type: CreateStartScripts) {
    applicationName = 'radar-schema'
}

//---------------------------------------------------------------------------//
// Test definition                                                           //
//---------------------------------------------------------------------------//
test {
    inputs.dir "${project.rootDir}/../commons"
    inputs.dir "${project.rootDir}/../specifications"
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
        showExceptions = true
        showCauses = true
        showStackTraces = true
        showStandardStreams = true
    }
}

//---------------------------------------------------------------------------//
// Style checking                                                            //
//---------------------------------------------------------------------------//
checkstyle {
    // codacy version
    toolVersion '6.16'
    ignoreFailures false

    configFile = file("$rootDir/config/checkstyle/checkstyle.xml")
}

pmd {
    // pmd version
    toolVersion = '6.12.0'
    ignoreFailures = false

    sourceSets = [sourceSets.main]

    consoleOutput = true

    ruleSets = []

    ruleSetFiles = files("$rootDir/config/pmd/ruleset.xml")
}


//---------------------------------------------------------------------------//
// Publishing                                                                //
//---------------------------------------------------------------------------//

tasks.withType(Tar){
    compression = Compression.GZIP
    archiveExtension.set('tar.gz')
}

publishing {
    publications {
        RadarToolsPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifactId artifactName
            pom.withXml {
                def root = asNode()
                root.appendNode('description', description)
                root.appendNode('name', artifactName)
                root.appendNode('url', githubUrl)
                root.children().last() + pomConfig
                root.dependencies.'*'.findAll() {
                    it.artifactId.text() == 'slf4j-simple'
                }.each() {
                    it.parent().remove(it)
                }
            }
        }
    }
}

bintray {
    user project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    override false
    publications 'RadarToolsPublication'
    pkg {
        repo = project.group
        name = artifactName
        userOrg = 'radar-cns'
        licenses = ['Apache-2.0']
        websiteUrl = website
        issueTrackerUrl = issueUrl
        vcsUrl = githubUrl
        githubRepo = githubRepoName
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
            desc = description
            vcsTag = System.getenv('TRAVIS_TAG')
            released = new Date()
        }
    }
}

artifactory {
    contextUrl = 'https://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
            password = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
            maven = true
        }
    }
}

artifactoryPublish {
    publications('RadarToolsPublication')
}
