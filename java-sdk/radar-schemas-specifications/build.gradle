plugins {
    id 'idea'
    id 'checkstyle'
    id 'pmd'
}

ext.artifactName = 'radar-schemas-specification'
ext.description = 'RADAR Schemas Specification SDK'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

idea {
    module {
        downloadSources = true
    }
}

ext.apacheCommonsVersion = '3.6'
ext.kafkaVersion = '0.10.2.1'
ext.jacksonModuleParameterNamesVersion = '2.9.0'
ext.junitVersion = '4.12'
ext.radarCommonsVersion = '0.4.2'
ext.slf4jVersion = '1.7.25'

dependencies {
    implementation project(':radar-schemas-commons')

    implementation group: 'org.radarcns', name: 'radar-commons', version: radarCommonsVersion
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: apacheCommonsVersion

    testCompile group: 'junit', name: 'junit', version: junitVersion
    testCompile group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion

    // For Topic name validation based on Kafka classes
    testCompile (group: 'org.apache.kafka', name: 'kafka_2.11', version: kafkaVersion) {
        exclude group: 'org.apache.kafka', module: 'kafka-clients'
        exclude group: 'net.sf.jopt-simple'
        exclude group: 'com.yammer.metrics'
        exclude group: 'org.scala-lang.modules'
        exclude group: 'org.slf4j'
        exclude group: 'com.101tec'
        exclude group: 'org.apache.zookeeper'
    }
}

//---------------------------------------------------------------------------//
// Exchange configuration with Java code                                     //
//---------------------------------------------------------------------------//
ext.exchnageConfigMainPath = 'src/main/resources/exchange.properties'
task exchangeConfig() {
    doLast {
        if (file(exchnageConfigMainPath).delete()) {
            file(exchnageConfigMainPath).createNewFile()
            file(exchnageConfigMainPath).write("project.group=${project.group}")
        } else {
            throw new GradleException("Error while creating file at ${exchnageConfigMainPath}")
        }
    }
}
compileJava.dependsOn exchangeConfig

task cleanExchangeConfig() {
    doLast {
        if (file(exchnageConfigMainPath).exists()) {
            if (!file(exchnageConfigMainPath).delete()) {
                throw new GradleException("File at ${exchnageConfigMainPath} cannot be delated.")
            }
        }

        if (file(exchnageConfigTestPath).exists()) {
            if (!file(exchnageConfigTestPath).delete()) {
                throw new GradleException("File at ${exchnageConfigTestPath} cannot be delated.")
            }
        }
    }
}
clean.dependsOn cleanExchangeConfig

//---------------------------------------------------------------------------//
// Test definition                                                           //
//---------------------------------------------------------------------------//
test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
        showExceptions = true
        showCauses = true
        showStackTraces = true
        showStandardStreams = true
    }
}

//---------------------------------------------------------------------------//
// Style checking                                                            //
//---------------------------------------------------------------------------//
checkstyle {
    // codacy version
    toolVersion '6.16'
    //ignoreFailures = false TODO set back
    ignoreFailures = true

    configFile = file("$projectDir/config/checkstyle/checkstyle.xml")
}

pmd {
    // pmd version
    toolVersion = '5.5.2'
    //ignoreFailures = false TODO set back
    ignoreFailures = true

    consoleOutput = true

    ruleSets = []

    ruleSetFiles = files("$projectDir/config/pmd/ruleset.xml")
}

//---------------------------------------------------------------------------//
// Publishing                                                                //
//---------------------------------------------------------------------------//

publishing {
    publications {
        RadarQuestionnairePublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId project.group
            artifactId artifactName
            version project.version
            pom.withXml {
                def root = asNode()
                root.appendNode('description', description)
                root.appendNode('name', artifactName)
                root.appendNode('url', githubUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    override = false
    publications = ['RadarQuestionnairePublication']
    pkg {
        repo = project.group
        name = artifactName
        userOrg = 'radar-cns'
        licenses = ['Apache-2.0']
        websiteUrl = website
        issueTrackerUrl = issueUrl
        vcsUrl = githubUrl
        githubRepo = githubRepoName
        githubReleaseNotesFile = 'README.md'
        version {
            name = project.version
            desc = description
            vcsTag = System.getenv('TRAVIS_TAG')
            released = new Date()
        }
    }
}
